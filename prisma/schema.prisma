generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum PlanType {
  FREE
  PROFESSIONAL
  BUSINESS
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  role          Role      @default(USER)
  password      String?
  emailVerified DateTime?
  image         String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  account            Account[]
  session            Session[]
  verificationOTP    VerificationOTP[]
  passwordResetToken PasswordResetToken[]
  Contact            Contact[]
  UserMonthlyUsage   UserMonthlyUsage?
  Plan               Plan?                @relation(fields: [planId], references: [id])
  planId             String?
  Invoice            Invoice[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationOTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp]) // Index for faster OTP lookups
  @@map("verification_otps")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token]) // Index for faster token lookups
  @@map("password_reset_tokens")
}

model Contact {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("contact_form_submissions")
}

model UserMonthlyUsage {
  id       String   @id @default(cuid())
  userId   String   @unique
  month    DateTime
  invoices Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_monthly_usages")
}

model GuestUsage {
  id        String    @id @default(cuid())
  ipAddress String    @unique
  invoices  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]

  @@index([ipAddress])
  @@map("guest_usages")
}

model Plan {
  id           String   @id @default(cuid())
  type         PlanType @unique
  invoiceLimit Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  users User[]

  @@map("plans")
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNo       String
  invoiceTitle    String
  fromName        String
  fromEmail       String
  fromAddress     String
  fromPhoneNumber String?
  abn             String?
  toName          String
  toEmail         String
  toAddress       String
  toPhoneNumber   String?
  toMobile        String?
  toFax           String?
  issueDate       DateTime
  dueDate         DateTime
  status          InvoiceStatus @default(PENDING)
  totalAmount     Float
  taxRate         Float?
  taxAmount       Float?

  userId  String?
  guestId String?
  user    User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  guest   GuestUsage? @relation(fields: [guestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InvoiceItem InvoiceItem[]

  @@unique([invoiceNo, userId])
  @@map("invoices")
}

model InvoiceItem {
  id          String @id @default(cuid())
  description String
  quantity    Int
  price       Float
  total       Float

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoice_items")
}
