generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  role          Role      @default(USER)
  password      String?
  emailVerified DateTime?
  image         String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  account            Account[]
  session            Session[]
  verificationOTP    VerificationOTP[]
  passwordResetToken PasswordResetToken[]
  Contact            Contact[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationOTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp]) // Index for faster OTP lookups
  @@map("verification_otps")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token]) // Index for faster token lookups
  @@map("password_reset_tokens")
}

model Contact {
  id        String   @id @default(cuid())
  userId    String? 
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@index([userId])
  @@map("contacts")
}
